# Copy this conf.py.example to conf.py and configure all the variables
# beginning with my_, then you will be able run the various test scripts
my_machine_name = ''  # short name to identify encodes made on this machine
my_machine_desc = ''  # description of hardware, CPU(s), memory, etc
my_x265_source  = r'C:\projects\x265\source' # location of CMakeLists.txt
my_sequences    = r'\\bigdata\sequences'
my_goldens      = r'\\bigdata\golden'
my_hm_decoder   = r'C:\projects\hm\bin\TAppDecoderStatic'
my_progress     = True # do you want to see build / encode status on console?
# encoder binary name, default x265
encoder_binary_name = 'x265'
encoder_library_name = 'libx265'
feature = False
feature_value = ''

# fill these in to email results after each completed test run
# here password should be base64 encoded
my_email_from   = ''
my_email_to     = ''
my_smtp_pwd     = ''
my_smtp_host    = 'smtp.gmail.com'
my_smtp_port    = 587

# It is for applying patches and sharing library
csv_feature      = False
my_patchlocation = ''
my_ftp_location  = ''

# --output-depth test support:
# declare pairs of compatible (main, main10, main12) builds which can provide
# shared libraries for each other using key pairs from my_builds. For
# example: my_libpairs = [('gcc', 'gcc10', 'gcc12'), ('vc11', 'vc1110', 'vc1112')]
my_libpairs = []

# keys from my_builds that you wish to upload to ftp
my_binaries_upload = []
my_ftp_url = ''
my_ftp_user = ''
my_ftp_pass = ''
my_ftp_folder = '' # 'Shared/HEVC/x265_Binaries'
# set these variables for automation
check_binary = ''
check_variable = ''
fps_check_variable = ''

# change to True if you want all output-change bitstreams to be saved
# for later review. If False, you can still enable this on an individual
# run by adding --save-changed to the command line
my_save_changed = False

# Allow the scripts to use a locally modified output-changing-commits.txt 
# (skipping the download step). Leave False unless you are testing
# commits you intend to push directly after testing (and this is only
# possible if *you* have push rights).
my_local_changers = False

# note that on POSIX systems you can use '~/' to signify your home dir

# location for encoder intermediates. One temp folder will be created
# per run, but should be deleted upon completion, so it does not require
# much space but it should have good throughput. If not defined Python
# will use the default temp folder for your platform and user account
my_tempfolder   = ''


# If you want to save encoder coredumps to debug crashes then configure
# as below and restart your machine.

# Windows: add registry entry in LocalDumps with same path as
# 'my_coredumppath' variable.
# HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps
# example- "DumpFolder", REG_EXPAND_SZ, "C:\\x265_coredumps"

# Linux: assign a path to 'my_coredumppath' variable and the script
# manage the rest

# Mac:  edit /etc/sysctl.conf as a root and this entry,
# kern.coredump=1
# kern.corefile=/cores/x265_coredumps/core.%P

# writable folder path in which to save core dump files
my_coredumppath = ''

# if you want the script to create pastebins of warnings and errors you
# must register at pastebin.com, sign in, then go to http://pastebin.com/api
# to find 'Your Unique Developer API Key'
my_pastebin_key = ''

my_make_flags   = [] # example: ['-j', '8'] for 8-core build parallelism

# add one entry here per build target that you would like to build and test
my_builds = {
    # Examples:
    #
    #'gcc'   :                   # build label (short name)
    #         ('default/',       # unique build folder
    #          'gcc',            # build group, see below
    #          'Unix Makefiles', # cmake generator
    #          'static checked', # short-hand cmake options (see below)
    #          {}),              # env-vars and other keyword arguments
    #
    #'gcc32' : ('gcc32/', 'gcc32', 'Unix Makefiles', 'static', {'CFLAGS':'-m32'}),
    #'gcc10' : ('gcc10/', 'gcc10', 'Unix Makefiles', 'main10', {}),
    #'llvm'  : ('llvm/', 'gcc', 'Unix Makefiles', 'checked',
    #           {'CC' : 'clang', 'CXX' : 'clang++'}),
    #'vc11'  : ('vc11/', 'vc', 'Visual Studio 11 Win64', 'checked', {'add-depths': ['8bit', '12bit']}),
    #'vc11D' : ('vc11D/', 'vc', 'Visual Studio 11 Win64', 'debug crt noasm ppa', {}),
    #'win32' : ('vc11x86/', 'vc', 'Visual Studio 11', 'static ppa', {}),
    #'mingw' : ('mingw/', 'gcc', 'MinGW Makefiles', 'tests',
    #           {'PATH' : r'C:\mingw64\bin'}),
}

# these builds are for uploading binaries on egnyte for sharing
my_upload = {}

# Many builds of x265 will produce the same outputs given the same input
# sequence and command line. The 'build group' string identifies these
# groups of encoder builds which are expected to match outputs

# Supported keyword arguments:
#   CFLAGS - directly assigned to CMAKE CFLAG args (intended for -m32)
#   CC,CXX - are set in the environment for cmake for selecting compilers
#   PATH   - this path is inserted into PATH for cmake, build and encoder runs
#            intended for MinGW/bin folder

# short-hand strings for CMAKE options, feel free to add more
option_strings = {
    'warn'    : '-DWARNINGS_AS_ERRORS=ON',
    'checked' : '-DCHECKED_BUILD=ON',
    'ftrapv'  : '-DENABLE_AGGRESSIVE_CHECKS=ON',
    'main10'  : '-DHIGH_BIT_DEPTH=ON',
    'main12'  : '-DHIGH_BIT_DEPTH=ON -DMAIN12=ON',
    'debug'   : '-DCMAKE_BUILD_TYPE=Debug',
    'reldeb'  : '-DCMAKE_BUILD_TYPE=RelWithDebInfo',
    'tests'   : '-DENABLE_TESTS=ON',
    'ppa'     : '-DENABLE_PPA=ON',
    'stats'   : '-DDETAILED_CU_STATS=ON',
    'static'  : '-DENABLE_SHARED=OFF',
    'noasm'   : '-DENABLE_ASSEMBLY=OFF',
    'nocolor' : '-DCMAKE_COLOR_MAKEFILE=OFF',
    'crt'     : '-DSTATIC_LINK_CRT=ON',
    'native'  : '-DNATIVE_BUILD=ON',
}
